import asyncio
import os

from pyrogram import filters
from pyrogram.enums import ChatMemberStatus
from pyrogram.errors import (
    ChatAdminRequired,
    UserAlreadyParticipant,
    UserNotParticipant,
)
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from pytgcalls import StreamType
from pytgcalls.exceptions import NoActiveGroupCall, TelegramServerError, UnMuteNeeded
from pytgcalls.types import AudioPiped, HighQualityAudio
from youtube_search import YoutubeSearch

from config import DURATION_LIMIT
from LEGITMUSIC import (
    ASS_ID,
    ASS_MENTION,
    ASS_NAME,
    ASS_USERNAME,
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    app,
    app2,
    legitdb,
    pytgcalls,
)
from LEGITMUSIC.help.active import add_active_chat, is_active_chat, stream_on
from LEGITMUSIC.help.downloaders import audio_dl
from LEGITMUSIC.help.errors import DurationLimitError
from LEGITMUSIC.help.gets import get_file_name, get_url
from LEGITMUSIC.help.inline import buttons
from LEGITMUSIC.help.queue import put
from LEGITMUSIC.help.thumbnails import gen_qthumb, gen_thumb


@app.on_message(
    filters.command(["play", "vplay", "p"])
    & filters.group
    & ~filters.forwarded
    & ~filters.via_bot
)
async def play(_, message: Message):
    fallen = await message.reply_text("¬ª ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢, ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...")
    try:
        await message.delete()
    except:
        pass

    try:
        try:
            get = await app.get_chat_member(message.chat.id, ASS_ID)
        except ChatAdminRequired:
            return await fallen.edit_text(
                f"¬ª …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥ús·¥á Äs ·¥†…™·¥Ä  ü…™…¥·¥ã “ì·¥è Ä …™…¥·¥†…™·¥õ…™…¥…¢ {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è {message.chat.title}."
            )
        if get.status == ChatMemberStatus.BANNED:
            unban_butt = InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text=f"·¥ú…¥ ô·¥Ä…¥ {ASS_NAME}",
                            callback_data=f"unban_assistant {message.chat.id}|{ASS_ID}",
                        ),
                    ]
                ]
            )
            return await fallen.edit_text(
                text=f"¬ª {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …™s  ô·¥Ä…¥…¥·¥á·¥Ö …™…¥ {message.chat.title}\n\nñ¢µ …™·¥Ö : `{ASS_ID}`\nñ¢µ …¥·¥Ä·¥ç·¥á : {ASS_MENTION}\nñ¢µ ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á : @{ASS_USERNAME}\n\n·¥ò ü·¥á·¥Äs·¥á ·¥ú…¥ ô·¥Ä…¥ ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥Ä…¥·¥Ö ·¥ò ü·¥Ä è ·¥Ä…¢·¥Ä…™…¥...",
                reply_markup=unban_butt,
            )
    except UserNotParticipant:
        if message.chat.username:
            invitelink = message.chat.username
            try:
                await app2.resolve_peer(invitelink)
            except Exception as ex:
                LOGGER.error(ex)
        else:
            try:
                invitelink = await app.export_chat_invite_link(message.chat.id)
            except ChatAdminRequired:
                return await fallen.edit_text(
                    f"¬ª …™ ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á ·¥ús·¥á Äs ·¥†…™·¥Ä  ü…™…¥·¥ã “ì·¥è Ä …™…¥·¥†…™·¥õ…™…¥…¢ {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è {message.chat.title}."
                )
            except Exception as ex:
                return await fallen.edit_text(
                    f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è {message.chat.title}.\n\n** Ä·¥á·¥Äs·¥è…¥ :** `{ex}`"
                )
        if invitelink.startswith("https://t.me/+"):
            invitelink = invitelink.replace("https://t.me/+", "https://t.me/joinchat/")
        anon = await fallen.edit_text(
            f"·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...\n\n…™…¥·¥†…™·¥õ…™…¥…¢ {ASS_NAME} ·¥õ·¥è {message.chat.title}."
        )
        try:
            await app2.join_chat(invitelink)
            await asyncio.sleep(2)
            await legit.edit_text(
                f"{ASS_NAME} ·¥ä·¥è…™…¥·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è,\n\ns·¥õ·¥Ä Ä·¥õ…™…¥…¢ s·¥õ Ä·¥á·¥Ä·¥ç..."
            )
        except UserAlreadyParticipant:
            pass
        except Exception as ex:
            return await legit.edit_text(
                f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è {message.chat.title}.\n\n** Ä·¥á·¥Äs·¥è…¥ :** `{ex}`"
            )
        try:
            await app2.resolve_peer(invitelink)
        except:
            pass

    ruser = message.from_user.first_name
    audio = (
        (message.reply_to_message.audio or message.reply_to_message.voice)
        if message.reply_to_message
        else None
    )
    url = get_url(message)
    if audio:
        if round(audio.duration / 60) > DURATION_LIMIT:
            raise DurationLimitError(
                f"¬ª s·¥è Ä Ä è  ô·¥Ä ô è, ·¥õ Ä·¥Ä·¥Ñ·¥ã  ü·¥è…¥…¢·¥á Ä ·¥õ ú·¥Ä…¥  {DURATION_LIMIT} ·¥ç…™…¥·¥ú·¥õ·¥ás ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥ò ü·¥Ä è ·¥è…¥ {BOT_NAME}."
            )

        file_name = get_file_name(audio)
        title = file_name
        duration = round(audio.duration / 60)
        file_path = (
            await message.reply_to_message.download(file_name)
            if not os.path.isfile(os.path.join("downloads", file_name))
            else f"downloads/{file_name}"
        )

    elif url:
        try:
            results = YoutubeSearch(url, max_results=1).to_dict()
            title = results[0]["title"]
            duration = results[0]["duration"]
            videoid = results[0]["id"]

            secmul, dur, dur_arr = 1, 0, duration.split(":")
            for i in range(len(dur_arr) - 1, -1, -1):
                dur += int(dur_arr[i]) * secmul
                secmul *= 60

        except Exception as e:
            return await legit.edit_text(f"s·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢\n\n**·¥á Ä Ä·¥è Ä :** `{e}`")

        if (dur / 60) > DURATION_LIMIT:
            return await fallen.edit_text(
                f"¬ª s·¥è Ä Ä è  ô·¥Ä ô è, ·¥õ Ä·¥Ä·¥Ñ·¥ã  ü·¥è…¥…¢·¥á Ä ·¥õ ú·¥Ä…¥  {DURATION_LIMIT} ·¥ç…™…¥·¥ú·¥õ·¥ás ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥ò ü·¥Ä è ·¥è…¥ {BOT_NAME}."
            )
        file_path = audio_dl(url)
    else:
        if len(message.command) < 2:
            return await legit.edit_text("¬ª ·¥° ú·¥Ä·¥õ ·¥Ö·¥è  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥ò ü·¥Ä è  ô·¥Ä ô è ?")
        await fallen.edit_text("üîé")
        query = message.text.split(None, 1)[1]
        try:
            results = YoutubeSearch(query, max_results=1).to_dict()
            url = f"https://youtube.com{results[0]['url_suffix']}"
            title = results[0]["title"]
            videoid = results[0]["id"]
            duration = results[0]["duration"]

            secmul, dur, dur_arr = 1, 0, duration.split(":")
            for i in range(len(dur_arr) - 1, -1, -1):
                dur += int(dur_arr[i]) * secmul
                secmul *= 60

        except Exception as e:
            LOGGER.error(str(e))
            return await legit.edit("¬ª “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss ·¥èÃ®·¥ú·¥á Ä è, ·¥õ Ä è ·¥ò ü·¥Ä è…™…¥…¢ ·¥Ä…¢·¥Ä…™…¥...")

        if (dur / 60) > DURATION_LIMIT:
            return await legit.edit(
                f"¬ª s·¥è Ä Ä è  ô·¥Ä ô è, ·¥õ Ä·¥Ä·¥Ñ·¥ã  ü·¥è…¥…¢·¥á Ä ·¥õ ú·¥Ä…¥  {DURATION_LIMIT} ·¥ç…™…¥·¥ú·¥õ·¥ás ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥Ä ü ü·¥è·¥°·¥á·¥Ö ·¥õ·¥è ·¥ò ü·¥Ä è ·¥è…¥ {BOT_NAME}."
            )
        file_path = audio_dl(url)

    try:
        videoid = videoid
    except:
        videoid = "fuckitstgaudio"
    if await is_active_chat(message.chat.id):
        await put(
            message.chat.id,
            title,
            duration,
            videoid,
            file_path,
            ruser,
            message.from_user.id,
        )
        position = len(legitdb.get(message.chat.id))
        qimg = await gen_qthumb(videoid, message.from_user.id)
        await message.reply_photo(
            photo=qimg,
            caption=f"**‚ûª ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥èÃ®·¥ú·¥á·¥ú·¥á ·¥Ä·¥õ {position}**\n\n‚Ä£ **·¥õ…™·¥õ ü·¥á :** [{title[:27]}](https://t.me/{BOT_USERNAME}?start=info_{videoid})\n‚Ä£ **·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :** `{duration}` ·¥ç…™…¥·¥ú·¥õ·¥ás\n‚Ä£ ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è :** {ruser}",
            reply_markup=buttons,
        )
    else:
        stream = AudioPiped(file_path, audio_parameters=HighQualityAudio())
        try:
            await pytgcalls.join_group_call(
                message.chat.id,
                stream,
                stream_type=StreamType().pulse_stream,
            )

        except NoActiveGroupCall:
            return await fallen.edit_text(
                "**¬ª …¥·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ “ì·¥è·¥ú…¥·¥Ö.**\n\n·¥© ü·¥á·¥Äs·¥á ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á  è·¥è·¥ú s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥õ ú·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ."
            )
        except TelegramServerError:
            return await fallen.edit_text(
                "¬ª ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …™s  ú·¥Ä·¥†…™…¥…¢ s·¥è·¥ç·¥á …™…¥·¥õ·¥á Ä…¥·¥Ä ü ·¥ò Ä·¥è ô ü·¥á·¥çs, ·¥ò ü·¥á·¥Äs·¥á  Ä·¥ás·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."
            )
        except UnMuteNeeded:
            return await fallen.edit_text(
                f"¬ª {BOT_NAME} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …™s ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ,\n\n·¥ò ü·¥á·¥Äs·¥á ·¥ú…¥·¥ç·¥ú·¥õ·¥á {ASS_MENTION} ·¥è…¥ ·¥†…™·¥Ö·¥á·¥è·¥Ñ ú·¥Ä·¥õ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥ò ü·¥Ä è…™…¥…¢ ·¥Ä…¢·¥Ä…™…¥."
            )

        imgt = await gen_thumb(videoid, message.from_user.id)
        await stream_on(message.chat.id)
        await add_active_chat(message.chat.id)
        await message.reply_photo(
            photo=imgt,
            caption=f"**‚ûª s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**\n\n‚Ä£ **·¥õ…™·¥õ ü·¥á :** [{title[:27]}](https://t.me/{BOT_USERNAME}?start=info_{videoid})\n‚Ä£ **·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ :** `{duration}` ·¥ç…™…¥·¥ú·¥õ·¥ás\n‚Ä£ ** Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö  ô è :** {ruser}",
            reply_markup=buttons,
        )

    return await legit.delete()
